import sys
import requests
from datetime import datetime

from airflow import DAG
from airflow.models import Variable
from airflow.utils.dates import days_ago
from airflow.sensors.python import PythonSensor
from airflow.operators.python_operator import PythonOperator
from airflow.contrib.operators.ssh_operator import SSHOperator

# –î–∞—Ç—ã –¥–ª—è –≤—ã–≥—Ä—É–∑–∫–∏ –ø–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω–æ–π –Ω —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ. 
# 3-4 –¥–Ω—è —á—Ç–æ–± –±–æ–ª—å—à–∞—è —á–∞—Å—Ç—å —Å–µ—Å—Å–∏–π –∫–ª–∏–µ–Ω—Ç–æ–≤ –Ω–∞ —Å—Ç–æ—Ä–æ–Ω–µ —Å–∞–π—Ç–∞ –±—ã–ª–∏ –∑–∞–≤–µ—Ä—à–µ–Ω—ã
# start_date = end_date —Ç–∫ –±–µ—Å–ø–ª–∞—Ç–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –Ω–∞ —Å—Ç–æ—Ä–æ–Ω–µ –Ø–ú - 10 –ì–±
start_date_v = str(Variable.get("startEndDate_YaMetrika"))
end_date_v = str(Variable.get("startEndDate_YaMetrika"))

# –ü—Ä–∞–º–µ—Ç—Ä—ã –≤—ã–≥—Ä—É–∑–∫–∏, –∑–∞—Ö–∞—Ä–¥–∫–æ–∂–µ–Ω—ã –∏ –Ω–µ —á–∏—Ç–∞—é—Ç—Å—è –∏–∑ —Ñ–∞–π–ª–∞ –ø–æ—Ç–æ–º—É —á—Ç–æ –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –Ω–∞ —Ö–æ—Å—Ç
col_tab_Basic = "ym:pv:watchID,ym:pv:date,ym:pv:dateTime,ym:pv:pageViewID,ym:pv:counterID,ym:pv:clientID,ym:pv:counterUserIDHash,ym:pv:title,ym:pv:goalsID,ym:pv:URL"
col_tab_TrafficSource = "ym:pv:watchID,ym:pv:date,ym:pv:referer,ym:pv:UTMCampaign,ym:pv:UTMContent,ym:pv:UTMMedium,ym:pv:UTMSource,ym:pv:UTMTerm,ym:pv:from,ym:pv:hasGCLID,ym:pv:GCLID,ym:pv:lastTrafficSource,ym:pv:lastSearchEngineRoot,ym:pv:lastSearchEngine,ym:pv:lastAdvEngine,ym:pv:lastSocialNetwork,ym:pv:lastSocialNetworkProfile,ym:pv:recommendationSystem,ym:pv:messenger,ym:pv:browser"
col_tab_Ecommerce_EventParams_EventType = "ym:pv:watchID,ym:pv:date,ym:pv:link,ym:pv:download,ym:pv:notBounce,ym:pv:artificial,ym:pv:ecommerce,ym:pv:params,ym:pv:parsedParamsKey1,ym:pv:parsedParamsKey2,ym:pv:parsedParamsKey3,ym:pv:parsedParamsKey4,ym:pv:parsedParamsKey5,ym:pv:parsedParamsKey6,ym:pv:parsedParamsKey7,ym:pv:parsedParamsKey8,ym:pv:parsedParamsKey9,ym:pv:parsedParamsKey10,ym:pv:httpError,ym:pv:shareService,ym:pv:shareURL,ym:pv:shareTitle"
col_tab_Device = "ym:pv:watchID,ym:pv:date,ym:pv:operatingSystem,ym:pv:browserMajorVersion,ym:pv:browserMinorVersion,ym:pv:browserCountry,ym:pv:browserEngine,ym:pv:browserEngineVersion1,ym:pv:browserEngineVersion2,ym:pv:browserEngineVersion3,ym:pv:browserEngineVersion4,ym:pv:browserLanguage,ym:pv:clientTimeZone,ym:pv:cookieEnabled,ym:pv:deviceCategory,ym:pv:javascriptEnabled,ym:pv:mobilePhone,ym:pv:mobilePhoneModel,ym:pv:operatingSystemRoot,ym:pv:physicalScreenHeight,ym:pv:physicalScreenWidth,ym:pv:screenColors,ym:pv:screenFormat,ym:pv:screenHeight,ym:pv:screenOrientation,ym:pv:screenWidth,ym:pv:windowClientHeight,ym:pv:windowClientWidth,ym:pv:ipAddress,ym:pv:regionCity,ym:pv:regionCountry,ym:pv:regionCityID,ym:pv:regionCountryID,ym:pv:isPageView,ym:pv:isTurboPage,ym:pv:isTurboApp,ym:pv:iFrame"

counter_id_v = "11111111"
API_token_v = "put_your_token"
headers_v = {'Authorization': f"OAuth {API_token_v}", 'Accept-Encoding': 'gzip'}

# BASH –∫–æ–º–∞–Ω–¥—ã –∫–æ—Ç–æ—Ä—ã–µ —Ç–æ–ª–∫–∞—é—Ç —Å–∫—Ä–∏–ø—Ç—ã –Ω–∞ —Å—Ç–æ—Ä–æ–Ω–µ 08 —Ö–æ—Å—Ç–∞ 
bash_clear_tmp = '/usr/bin/python3 /home/bdataadmin/airflow/test_script/clear_logs_folder.py'
bash_clear_hdfs = '/usr/bin/bash /home/bdataadmin/airflow/test_script/—Åheck_hdfs_txt.sh '

bash_rm_4dir_hdfs = '/usr/bin/bash /home/bdataadmin/airflow/test_script/remove_4dir_hdfs.sh '

bash_command_extract_partsize = '/usr/bin/python3 /home/bdataadmin/airflow/test_script/extract_partsize.py'
bash_download_txt = '/usr/bin/python3 /home/bdataadmin/airflow/test_script/dowload_parts.py'
bash_merge_txt = '/usr/bin/python3 /home/bdataadmin/airflow/test_script/merge_txt.py'
bash_hdfs_put_bigTxt = '/usr/bin/bash hdfs dfs -put /home/bdataadmin/airflow/txt_big/final_txt.txt /data/yaMetrika/txt '

bash_start_pySpark_basic_orc = '/usr/bin/bash /home/bdataadmin/airflow/test_script/start_pySpark_hits_basic_orc.sh '
bash_start_pySpark_trafficSource_orc = '/usr/bin/bash /home/bdataadmin/airflow/test_script/start_pySpark_hits_trafficSource_orc.sh '
bash_start_pySpark_3E_orc = '/usr/bin/bash /home/bdataadmin/airflow/test_script/start_pySpark_hits_3E_orc.sh '
bash_start_pySpark_Device_orc = '/usr/bin/bash /home/bdataadmin/airflow/test_script/start_pySpark_hits_device_orc.sh '
bash_start_pySpark_join = '/usr/bin/bash /home/bdataadmin/airflow/test_script/start_pySpark_hits_join.sh '

def read_request_id():
    """
    –§—É–Ω–∫—Ü–∏—è –Ω—É–∂–Ω–∞ —á—Ç–æ–± —á–∏—Ç–∞—Ç—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–π request_id
    """
    request_id = Variable.get("request_id_YaMetrika")
    return request_id

# –î—É–±–ª–∏—Ä—É–µ–º –∏–Ω–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –≤—ã–≥—Ä—É–∑–∫–∏ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ 08 —Ö–æ—Å—Ç–µ
bash_command_request_id = f'echo "{read_request_id()}" > /home/bdataadmin/airflow/logs/request_id.txt'


# –û—Ü–µ–Ω–∫–∞ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–ø—Ä–æ—Å–∞
def ocenka_vozmozhnisti_sozd_zaprosa(counter_id, headers, start_date, end_date, col_tab):
    """
    –û—Ü–µ–Ω–∫–∞ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ —Å—Ç–æ—Ä–æ–Ω–µ –Ø–ú,
    —Ñ—É–Ω–∫—Ü–∏—è —à–ª–µ—Ç –∑–∞–ø—Ä–æ—Å —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏ –≤—ã–≥—Ä—É–∑–∫–∏ –∫–æ—Ç–æ—Ä—ã–µ –Ω–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É—é—Ç
    –∏ –º—ã –æ–∂–∏–¥–∞–µ–º –æ—Ç–≤–µ—Ç r.json()['log_request_evaluation']['possible'] == True
    """
    get_ocenka = f"https://api-metrika.yandex.net/management/v1/counter/{counter_id}/logrequests/evaluate"

    params_ocenka = {
        'date1': start_date,
        'date2': end_date,
        'fields': col_tab,
        'source': 'hits'  # hits visits
    }

    r = requests.get(get_ocenka, params=params_ocenka, headers=headers)

    if r.status_code == 200:
        if r.json()['log_request_evaluation']['possible'] == True:
            print('–í—ã–≥—Ä—É–∑–∫–∞ –≤–æ–∑–º–æ–∂–Ω–∞')
        elif r.json()['log_request_evaluation']['possible'] == False:
            print('YaApi –æ—Ç–≤–µ—Ç–∏–ª —á—Ç–æ –≤—ã–≥—Ä—É–∑–∫–∞ –Ω–µ–≤–æ–∑–º–æ–∂–Ω–∞')
            return False
        else:
            print('–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫' + str(r.status_code))
            return False
    else:
        sys.exit('–ó–∞–ø—Ä–æ—Å —É–ø–∞–ª: ' + str(r.status_code))
        return False


def sozd_zaprosa_logov(counter_id, headers, start_date, end_date, col_tab):
    """
    –ò—Å—Ö–æ–¥—è –∏–∑ –æ—Ü–µ–Ω–∫–∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–ø—Ä–æ—Å–∞
    –º—ã –æ—Ç–ø—Ä–ø–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—ã–≥—Ä—É–∑–∫–∏. 
    –ü–æ—Ö–æ–∂–∏–π —Å–∫—Ä–∏–ø—Ç –Ω–∞ —Å—Ç–æ—Ä–æ–Ω–µ 08 —Ö–æ—Å—Ç–∞ —Å–∫–∞—á–∏–≤–∞–µ—Ç –∏
    –∑–∞–ø–∏—Å—ã–≤–∞–µ—Ç –≤ —Ñ–∞–π–ª –º–Ω–æ–∂–µ—Å—Ç–≤–æ –ø–∞—Ä –∑–Ω—á–µ–Ω–∏–π:
    –Ω–æ–º–µ—Ä —á–∞—Å—Ç–∏ –≤—ã–≥—Ä—É–∑–∫–∏ (parts) –∏ —Ä–∞–∑–º–µ—Ä —ç—Ç–æ–π —á–∞—Å—Ç–∏ (partSizes) 
    """

    post_sozdanie_zaprosa_logov = f"https://api-metrika.yandex.net/management/v1/counter/{counter_id}/logrequests"

    params_sozdanie_zaprosa_logov = {
        'date1': start_date,
        'date2': end_date,
        'fields': col_tab,
        'source': 'hits'  # hits visits
    }

    r = requests.post(post_sozdanie_zaprosa_logov, params=params_sozdanie_zaprosa_logov, headers=headers)

    if r.status_code == 200:
        if r.json()['log_request']['status'] == 'created':
            print('–ó–∞–ø—Ä–æ—Å —Å–æ–∑–¥–∞—ë—Ç—Å—è')
            # print(r.json()['log_request']['request_id'])
            Variable.set("request_id_YaMetrika", str(r.json()['log_request']['request_id']))
        else:
            sys.exit('–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫' + str(r.status_code))
            return False
    else:
        sys.exit('–ó–∞–ø—Ä–æ—Å —É–ø–∞–ª: ' + str(r.status_code))
        return False


def get_status(counter_id, headers, request_id):
    """
    –ü–æ—Å–ª–µ —Å–æ–∑–¥–Ω–∏—è –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ —Å—Ç–æ—Ä–æ–Ω–µ –Ø–ú, —Å–∞–º–æ–º—É –Ø–ú 
    —Ç—Ä–µ–±—É–µ—Ç—Å—è –≤—Ä–µ–º—è –Ω–∞ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—ã–≥—Ä—É–∑–∫–∏
    –∏ —ç—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ–º
    –≥–æ—Ç–æ–≤ –ª–∏ –∫ –≤—ã–≥—Ä—É–∑–∫–µ –Ω–∞—à –∑–∞–ø—Ä–æ—Å
    """

    get_status = f"https://api-metrika.yandex.net/management/v1/counter/{counter_id}/logrequest/{request_id}"

    r = requests.get(get_status, headers=headers)

    if r.status_code == 200:
        if r.json()['log_request']['status'] == 'processed':
            print('–£—Å–ø–µ—Ö')
            return True
        elif r.json()['log_request']['status'] == 'created':
            print('–ù—É–∂–Ω–æ –∂–¥–∞—Ç—å, –∑–∞–ø—Ä–æ—Å –≤ —Å—Ç–∞—Ç—É—Å–µ created –∏ —É–∂–µ –≥–æ—Ç–æ–≤–∏—Ç—Å—è –∏–ª–∏ –≤ –æ—á–µ—Ä–µ–¥–∏ –Ω–∞ –∏—Å–ø–æ–ª–Ω–µ–Ω–∏–µ')
            return False
        else:
            sys.exit('–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫' + str(r.status_code))
            return False
    else:
        sys.exit('–ó–∞–ø—Ä–æ—Å —É–ø–∞–ª: ' + str(r.status_code))
        return False


def clear_YaApi_query(counter_id, headers, request_id):
    """
    –ü–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π –≤—ã–≥—Ä—É–∑–∫–∏ –≤—Å–µ—Ö —á–∞—Å—Ç–µ–π –∑–∞–ø—Ä–æ—Å–∞ 
    –∏ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏—Ö –Ω–∞ –ø–æ–ª–Ω–æ—Ç—É (–Ω–∞ —Å—Ç—Ä–æ–Ω–µ 08 —Ö–æ—Å—Ç–∞)
    –º—ã –æ—á–∏—â–∞–µ–º –Ω–∞—à–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ (–≤ –∫–æ—Ç–æ—Ä–æ–º 10 –ì–±
    –≤ –±–µ—Å–ø–ª–∞—Ç–Ω–æ–π –≤–µ—Ä—Å–∏–∏) –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–∏—Ö –≤—ã–≥—Ä—É–∑–æ–∫   
    """

    post_clean = f"https://api-metrika.yandex.net/management/v1/counter/{counter_id}/logrequest/{request_id}/clean"
    r = requests.post(post_clean, headers=headers)
    if r.status_code == 200:
        if r.json()['log_request']['status'] == 'cleaned_by_user':
            print('–î–∞–Ω–Ω—ã–µ –Ø–Ω–¥–µ–∫—Å –º–µ—Ç—Ä–∏–∫–∏ —É—Å–ø–µ—à–Ω–æ –æ—á–∏—â–µ–Ω—ã –Ω–∞ —Å—Ç–æ—Ä–æ–Ω–µ –Ø–Ω–¥–µ–∫—Å–∞')
        else:
            sys.exit('–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫' + str(r.status_code))
            return False
    else:
        sys.exit('–ó–∞–ø—Ä–æ—Å —É–ø–∞–ª: ' + str(r.status_code))
        return False


# DAG —É–ø–∞–ª üõë
# DAG –æ—Ç—Ä–∞–±–æ—Ç–∞–ª —É—Å–ø–µ—à–Ω–æ ‚úÖ
def tlgrm(message):
    """
    –§—É–Ω–∫—Ü–∏—è —á–µ—Ä–µ–∑ —Ç–µ–ª–µ–≥—Ä–∞–º–º –±–æ—Ç —à–ª–µ—Ç –≤ —Ç–µ–ª–µ–≥—Ä–∞–º–º –±–µ—Å–µ–¥—É
    –æ—Ç—á—ë—Ç—ã –æ–± —É—Å–ø–µ—à–Ω–æ—Å—Ç–∏ –∏–ª–∏ –Ω–µ —É—Å–ø–µ—à–Ω–æ—Å—Ç–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è DAG-–∞.
    –ë–µ—Å–µ–¥–∞ –Ω–∞–∑—ã–≤–∞–µ—Ç—Å—è: AFLT_BigDataReports
    """

    token = "bot_ID:bot_token"
    url = "https://api.telegram.org/bot"
    channel_id = "-100ChatID"
    url += token
    method = url + "/sendMessage"
    #    proxy = {'https': '192.168.41.118:1080'}
    #    proxy = {'https': 'http://192.168.41.118:1080'}

    try:
        r = requests.post(method,
                          data={
                              "chat_id": channel_id,
                              "text": message},
                          #                          proxies=proxy,
                          timeout=30)
        print(r.json())
    except requests.exceptions.ConnectionError:
        print("–ò—Å–∫–ª_1")
        return False


default_args = {
    'owner': 'airflow',
    'depends_on_past': False,
    'start_date': datetime(2024, 8, 25),
    'retries': 0
}

# –í DAG-–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–∞ –ª–æ–≥–∏–∫–∞ –ø—Ä–∏ –∫–æ—Ç–æ—Ä–æ–π –≤—ã–≥—Ä—É–∑–∫–∞ –¥–µ–ª–∏—Ç—Å—è –Ω–∞ 4 —á–∞—Å—Ç–∏
# –∏ join-—Ç—Å—è –Ω–∞ —Ñ–∏–Ω–∞–ª—å–Ω–æ–º —ç—Ç–∞–ø–µ —Å –æ—Ç—Ä–∞–≤–∫–æ–π —Å–æ–æ–±—â–µ–Ω–∏–π —Ç–µ–ª–µ–≥—Ä–∞–º —Ä–µ–ø–æ—Ä—Ç–µ—Ä.
# –ï—Å–ª–∏ –Ω–∞ –∫–∞–∫–æ–º-—Ç–æ —É–∑–ª–µ DAG-–∞ —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫ - —Å—á–∏—Ç–∞–µ–º —á—Ç–æ –≤—ã–≥—Ä—É–∑–∫–∞ –Ω–µ—É—Å–ø–µ—à–Ω–∞
# –∏ –¥–ª—è –¥–∞–Ω–Ω–æ–π –¥–∞—Ç—ã –Ω—É–∂–Ω–æ –Ω–∞—á–∏–Ω–∞—Ç—å –≤—Å–µ —Å–Ω–∞—á–∞–ª–∞. 
# –î–ª—è –≤–∏–∑–∏—Ç–æ–≤ –∏ —Ö–∏—Ç–æ–≤ —Å—É—â–µ—Å—Ç–≤—É—é—Ç –ø–∞—Ä—ã DAG-–æ–≤: 1)—Å –≤—ã–±–æ—Ä–æ–º –¥–∞—Ç—ã –¥–ª—è –≤—ã–≥—Ä—É–∑–∫–∏
# 2) –∏ –ø–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω–æ–º –Ω–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ - –∫–æ—Ç—Ä—Ä—ã–π –ª—É—á—à–µ –Ω–µ —Ç—Ä–æ–≥–∞—Ç—å.
with DAG(dag_id='BigData_YaApi_hits_date_selection_v3',
         tags=["ETL –¥–ª—è —Ä–∞–∑–æ–≤—ã—Ö –≤—ã–≥—Ä—É–∑–æ–∫"],
         default_args=default_args,
         schedule_interval='@once',
         start_date=days_ago(1)
         ) as dag:

    task_clear_tmp_1 = SSHOperator(
        task_id='task_clear_tmp_1',
        ssh_conn_id="ssh_08",
        command=bash_clear_tmp,
        dag=dag
    )

    task_clear_hdfs_1 = SSHOperator(
        task_id='task_clear_hdfs_1',
        ssh_conn_id="ssh_08",
        command=bash_clear_hdfs,
        dag=dag
    )

    task_rm_4dir_hdfs_1 = SSHOperator(
        task_id='task_rm_4dir_hdfs_1',
        ssh_conn_id="ssh_08",
        command=bash_rm_4dir_hdfs,
        dag=dag
    )

    ocenka_vozmozhnisti_sozd_zaprosa_1 = PythonOperator(
        task_id='ocenka_vozmozhnisti_sozd_zaprosa_1',
        python_callable=ocenka_vozmozhnisti_sozd_zaprosa,
        dag=dag,
        op_kwargs={
            'counter_id': counter_id_v,
            'API_token': API_token_v,
            'headers': headers_v,
            'start_date': start_date_v,
            'end_date': end_date_v,
            'col_tab': col_tab_Basic}
    )

    sozd_zaprosa_logov_1 = PythonOperator(
        task_id='sozd_zaprosa_logov_1',
        python_callable=sozd_zaprosa_logov,
        dag=dag,
        op_kwargs={
            'counter_id': counter_id_v,
            'API_token': API_token_v,
            'headers': headers_v,
            'start_date': start_date_v,
            'end_date': end_date_v,
            'col_tab': col_tab_Basic}
    )

    get_status_1 = PythonSensor(
        task_id='get_status_1',
        python_callable=get_status,
        poke_interval=5 * 60,  # –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç, –ß–µ—Ä–µ–∑ –∫–∞–∫–æ–µ –≤—Ä–µ–º—è –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞—Ç—å—Å—è (5 * 60)
        timeout=12 * 60 * 60,  # –≤—Ä–µ–º—è –¥–æ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–≥–æ –ø–∞–¥–µ–Ω–∏—è, 12 —á–∞—Å–æ–≤
        # retries=720,
        soft_fail=False,
        mode="reschedule",
        dag=dag,
        op_kwargs={
            'counter_id': counter_id_v,
            'API_token': API_token_v,
            'headers': headers_v,
            'request_id': read_request_id()}
    )

    task_save_request_id_1 = SSHOperator(
        task_id='task_save_request_id_1',
        ssh_conn_id="ssh_08",
        command=bash_command_request_id,
        dag=dag
    )

    task_extract_partsize_1 = SSHOperator(
        task_id='task_extract_partsize_1',
        ssh_conn_id="ssh_08",
        command=bash_command_extract_partsize,
        dag=dag
    )

    task_download_txt_1 = SSHOperator(
        task_id='task_download_txt_1',
        ssh_conn_id="ssh_08",
        command=bash_download_txt,
        dag=dag
    )

    task_merge_txt_1 = SSHOperator(
        task_id='task_merge_txt_1',
        ssh_conn_id="ssh_08",
        command=bash_merge_txt,
        dag=dag
    )

    clear_YaApi_query_1 = PythonOperator(
        task_id='clear_YaApi_query_1',
        python_callable=clear_YaApi_query,
        dag=dag,
        op_kwargs={
            'counter_id': counter_id_v,
            'API_token': API_token_v,
            'headers': headers_v,
            'request_id': read_request_id()}
    )

    task_move_bigTxt_1 = SSHOperator(
        task_id='task_move_bigTxt_1',
        ssh_conn_id="ssh_08",
        command=bash_hdfs_put_bigTxt,
        dag=dag
    )

    task_start_pySpark_Basic_orc = SSHOperator(
        task_id='task_start_pySpark_Basic_orc',
        ssh_conn_id="ssh_08",
        command=bash_start_pySpark_basic_orc,
        dag=dag
    )

    task_clear_tmp_2 = SSHOperator(
        task_id='task_clear_tmp_2',
        ssh_conn_id="ssh_08",
        command=bash_clear_tmp,
        dag=dag
    )

    task_clear_hdfs_2 = SSHOperator(
        task_id='task_clear_hdfs_2',
        ssh_conn_id="ssh_08",
        command=bash_clear_hdfs,
        dag=dag
    )

    ocenka_vozmozhnisti_sozd_zaprosa_2 = PythonOperator(
        task_id='ocenka_vozmozhnisti_sozd_zaprosa_2',
        python_callable=ocenka_vozmozhnisti_sozd_zaprosa,
        dag=dag,
        op_kwargs={
            'counter_id': counter_id_v,
            'API_token': API_token_v,
            'headers': headers_v,
            'start_date': start_date_v,
            'end_date': end_date_v,
            'col_tab': col_tab_TrafficSource}
    )

    sozd_zaprosa_logov_2 = PythonOperator(
        task_id='sozd_zaprosa_logov_2',
        python_callable=sozd_zaprosa_logov,
        dag=dag,
        op_kwargs={
            'counter_id': counter_id_v,
            'API_token': API_token_v,
            'headers': headers_v,
            'start_date': start_date_v,
            'end_date': end_date_v,
            'col_tab': col_tab_TrafficSource}
    )

    get_status_2 = PythonSensor(
        task_id='get_status_2',
        python_callable=get_status,
        poke_interval=5 * 60,  # –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç, –ß–µ—Ä–µ–∑ –∫–∞–∫–æ–µ –≤—Ä–µ–º—è –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞—Ç—å—Å—è (5 * 60)
        timeout=12 * 60 * 60,  # –≤—Ä–µ–º—è –¥–æ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–≥–æ –ø–∞–¥–µ–Ω–∏—è, 12 —á–∞—Å–æ–≤
        # retries=720,
        soft_fail=False,
        mode="reschedule",
        dag=dag,
        op_kwargs={
            'counter_id': counter_id_v,
            'API_token': API_token_v,
            'headers': headers_v,
            'request_id': read_request_id()}
    )

    task_save_request_id_2 = SSHOperator(
        task_id='task_save_request_id_2',
        ssh_conn_id="ssh_08",
        command=bash_command_request_id,
        dag=dag
    )

    task_extract_partsize_2 = SSHOperator(
        task_id='task_extract_partsize_2',
        ssh_conn_id="ssh_08",
        command=bash_command_extract_partsize,
        dag=dag
    )

    task_download_txt_2 = SSHOperator(
        task_id='task_download_txt_2',
        ssh_conn_id="ssh_08",
        command=bash_download_txt,
        dag=dag
    )

    task_merge_txt_2 = SSHOperator(
        task_id='task_merge_txt_2',
        ssh_conn_id="ssh_08",
        command=bash_merge_txt,
        dag=dag
    )

    clear_YaApi_query_2 = PythonOperator(
        task_id='clear_YaApi_query_2',
        python_callable=clear_YaApi_query,
        dag=dag,
        op_kwargs={
            'counter_id': counter_id_v,
            'API_token': API_token_v,
            'headers': headers_v,
            'request_id': read_request_id()}
    )

    task_move_bigTxt_2 = SSHOperator(
        task_id='task_move_bigTxt_2',
        ssh_conn_id="ssh_08",
        command=bash_hdfs_put_bigTxt,
        dag=dag
    )

    task_start_pySpark_TrafficSource_orc = SSHOperator(
        task_id='task_start_pySpark_TrafficSource_orc',
        ssh_conn_id="ssh_08",
        command=bash_start_pySpark_trafficSource_orc,
        dag=dag
    )

    task_clear_tmp_3 = SSHOperator(
        task_id='task_clear_tmp_3',
        ssh_conn_id="ssh_08",
        command=bash_clear_tmp,
        dag=dag
    )

    task_clear_hdfs_3 = SSHOperator(
        task_id='task_clear_hdfs_3',
        ssh_conn_id="ssh_08",
        command=bash_clear_hdfs,
        dag=dag
    )

    ocenka_vozmozhnisti_sozd_zaprosa_3 = PythonOperator(
        task_id='ocenka_vozmozhnisti_sozd_zaprosa_3',
        python_callable=ocenka_vozmozhnisti_sozd_zaprosa,
        dag=dag,
        op_kwargs={
            'counter_id': counter_id_v,
            'API_token': API_token_v,
            'headers': headers_v,
            'start_date': start_date_v,
            'end_date': end_date_v,
            'col_tab': col_tab_Ecommerce_EventParams_EventType}
    )

    sozd_zaprosa_logov_3 = PythonOperator(
        task_id='sozd_zaprosa_logov_3',
        python_callable=sozd_zaprosa_logov,
        dag=dag,
        op_kwargs={
            'counter_id': counter_id_v,
            'API_token': API_token_v,
            'headers': headers_v,
            'start_date': start_date_v,
            'end_date': end_date_v,
            'col_tab': col_tab_Ecommerce_EventParams_EventType}
    )

    get_status_3 = PythonSensor(
        task_id='get_status_3',
        python_callable=get_status,
        poke_interval=5 * 60,  # –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç, –ß–µ—Ä–µ–∑ –∫–∞–∫–æ–µ –≤—Ä–µ–º—è –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞—Ç—å—Å—è (5 * 60)
        timeout=12 * 60 * 60,  # –≤—Ä–µ–º—è –¥–æ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–≥–æ –ø–∞–¥–µ–Ω–∏—è, 12 —á–∞—Å–æ–≤
        # retries=720,
        soft_fail=False,
        mode="reschedule",
        dag=dag,
        op_kwargs={
            'counter_id': counter_id_v,
            'API_token': API_token_v,
            'headers': headers_v,
            'request_id': read_request_id()}
    )

    task_save_request_id_3 = SSHOperator(
        task_id='task_save_request_id_3',
        ssh_conn_id="ssh_08",
        command=bash_command_request_id,
        dag=dag
    )

    task_extract_partsize_3 = SSHOperator(
        task_id='task_extract_partsize_3',
        ssh_conn_id="ssh_08",
        command=bash_command_extract_partsize,
        dag=dag
    )

    task_download_txt_3 = SSHOperator(
        task_id='task_download_txt_3',
        ssh_conn_id="ssh_08",
        command=bash_download_txt,
        dag=dag
    )

    task_merge_txt_3 = SSHOperator(
        task_id='task_merge_txt_3',
        ssh_conn_id="ssh_08",
        command=bash_merge_txt,
        dag=dag
    )

    clear_YaApi_query_3 = PythonOperator(
        task_id='clear_YaApi_query_3',
        python_callable=clear_YaApi_query,
        dag=dag,
        op_kwargs={
            'counter_id': counter_id_v,
            'API_token': API_token_v,
            'headers': headers_v,
            'request_id': read_request_id()}
    )

    task_move_bigTxt_3 = SSHOperator(
        task_id='task_move_bigTxt_3',
        ssh_conn_id="ssh_08",
        command=bash_hdfs_put_bigTxt,
        dag=dag
    )

    task_start_pySpark_3E_orc = SSHOperator(
        task_id='task_start_pySpark_3E_orc',
        ssh_conn_id="ssh_08",
        command=bash_start_pySpark_3E_orc,
        dag=dag
    )

    task_clear_tmp_4 = SSHOperator(
        task_id='task_clear_tmp_4',
        ssh_conn_id="ssh_08",
        command=bash_clear_tmp,
        dag=dag
    )

    task_clear_hdfs_4 = SSHOperator(
        task_id='task_clear_hdfs_4',
        ssh_conn_id="ssh_08",
        command=bash_clear_hdfs,
        dag=dag
    )

    ocenka_vozmozhnisti_sozd_zaprosa_4 = PythonOperator(
        task_id='ocenka_vozmozhnisti_sozd_zaprosa_4',
        python_callable=ocenka_vozmozhnisti_sozd_zaprosa,
        dag=dag,
        op_kwargs={
            'counter_id': counter_id_v,
            'API_token': API_token_v,
            'headers': headers_v,
            'start_date': start_date_v,
            'end_date': end_date_v,
            'col_tab': col_tab_Device}
    )

    sozd_zaprosa_logov_4 = PythonOperator(
        task_id='sozd_zaprosa_logov_4',
        python_callable=sozd_zaprosa_logov,
        dag=dag,
        op_kwargs={
            'counter_id': counter_id_v,
            'API_token': API_token_v,
            'headers': headers_v,
            'start_date': start_date_v,
            'end_date': end_date_v,
            'col_tab': col_tab_Device}
    )

    get_status_4 = PythonSensor(
        task_id='get_status_4',
        python_callable=get_status,
        poke_interval=5 * 60,  # –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç, –ß–µ—Ä–µ–∑ –∫–∞–∫–æ–µ –≤—Ä–µ–º—è –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞—Ç—å—Å—è (5 * 60)
        timeout=12 * 60 * 60,  # –≤—Ä–µ–º—è –¥–æ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–≥–æ –ø–∞–¥–µ–Ω–∏—è, 12 —á–∞—Å–æ–≤
        # retries=720,
        soft_fail=False,
        mode="reschedule",
        dag=dag,
        op_kwargs={
            'counter_id': counter_id_v,
            'API_token': API_token_v,
            'headers': headers_v,
            'request_id': read_request_id()}
    )

    task_save_request_id_4 = SSHOperator(
        task_id='task_save_request_id_4',
        ssh_conn_id="ssh_08",
        command=bash_command_request_id,
        dag=dag
    )

    task_extract_partsize_4 = SSHOperator(
        task_id='task_extract_partsize_4',
        ssh_conn_id="ssh_08",
        command=bash_command_extract_partsize,
        dag=dag
    )

    task_download_txt_4 = SSHOperator(
        task_id='task_download_txt_4',
        ssh_conn_id="ssh_08",
        command=bash_download_txt,
        dag=dag
    )

    task_merge_txt_4 = SSHOperator(
        task_id='task_merge_txt_4',
        ssh_conn_id="ssh_08",
        command=bash_merge_txt,
        dag=dag
    )

    clear_YaApi_query_4 = PythonOperator(
        task_id='clear_YaApi_query_4',
        python_callable=clear_YaApi_query,
        dag=dag,
        op_kwargs={
            'counter_id': counter_id_v,
            'API_token': API_token_v,
            'headers': headers_v,
            'request_id': read_request_id()}
    )

    task_move_bigTxt_4 = SSHOperator(
        task_id='task_move_bigTxt_4',
        ssh_conn_id="ssh_08",
        command=bash_hdfs_put_bigTxt,
        dag=dag
    )

    task_start_pySpark_Device_orc = SSHOperator(
        task_id='task_start_pySpark_Device_orc',
        ssh_conn_id="ssh_08",
        command=bash_start_pySpark_Device_orc,
        dag=dag
    )

    task_clear_tmp_5 = SSHOperator(
        task_id='task_clear_tmp_5',
        ssh_conn_id="ssh_08",
        command=bash_clear_tmp,
        dag=dag
    )

    task_clear_hdfs_5 = SSHOperator(
        task_id='task_clear_hdfs_5',
        ssh_conn_id="ssh_08",
        command=bash_clear_hdfs,
        dag=dag
    )

    task_start_pySpark_join = SSHOperator(
        task_id='task_start_pySpark_join',
        ssh_conn_id="ssh_08",
        command=bash_start_pySpark_join,
        dag=dag
    )

    task_rm_4dir_hdfs_2 = SSHOperator(
        task_id='task_rm_4dir_hdfs_2',
        ssh_conn_id="ssh_08",
        command=bash_rm_4dir_hdfs,
        dag=dag
    )

    tlgrm_allSuccess = PythonOperator(
        task_id='tlgrm_allSuccess',
        python_callable=tlgrm,
        dag=dag,
        trigger_rule='all_success',
        op_kwargs={
            'message': f"–û—Ç—Ä–∞–±–æ—Ç–∞–ª —É—Å–ø–µ—à–Ω–æ ‚úÖ - DAG hits_schedule_{start_date_v}_{end_date_v}"}
    )

    tlgrm_oneFailed = PythonOperator(
        task_id='tlgrm_oneFailed',
        python_callable=tlgrm,
        dag=dag,
        trigger_rule='one_failed',
        op_kwargs={
            'message': f"–£–ø–∞–ª üõë - DAG hits_schedule_{read_request_id()}_{start_date_v}_{end_date_v}"}
    )

(task_clear_tmp_1 >> task_clear_hdfs_1 >> task_rm_4dir_hdfs_1 >> ocenka_vozmozhnisti_sozd_zaprosa_1 >> sozd_zaprosa_logov_1 >> get_status_1 >> task_save_request_id_1 >> task_extract_partsize_1 >> task_download_txt_1 >> task_merge_txt_1 >> clear_YaApi_query_1 >> task_move_bigTxt_1 >> task_start_pySpark_Basic_orc >> task_clear_tmp_2 >> task_clear_hdfs_2 >> ocenka_vozmozhnisti_sozd_zaprosa_2 >> sozd_zaprosa_logov_2 >> get_status_2 >> task_save_request_id_2 >> task_extract_partsize_2 >> task_download_txt_2 >> task_merge_txt_2 >> clear_YaApi_query_2 >> task_move_bigTxt_2 >> task_start_pySpark_TrafficSource_orc >> task_clear_tmp_3 >> task_clear_hdfs_3 >> ocenka_vozmozhnisti_sozd_zaprosa_3 >> sozd_zaprosa_logov_3 >> get_status_3 >> task_save_request_id_3 >> task_extract_partsize_3 >> task_download_txt_3 >> task_merge_txt_3 >> clear_YaApi_query_3 >> task_move_bigTxt_3 >> task_start_pySpark_3E_orc >> task_clear_tmp_4 >> task_clear_hdfs_4 >> ocenka_vozmozhnisti_sozd_zaprosa_4 >> sozd_zaprosa_logov_4 >> get_status_4 >> task_save_request_id_4 >> task_extract_partsize_4 >> task_download_txt_4 >> task_merge_txt_4 >> clear_YaApi_query_4 >> task_move_bigTxt_4 >> task_start_pySpark_Device_orc >> task_clear_tmp_5 >> task_clear_hdfs_5 >> task_start_pySpark_join >> task_rm_4dir_hdfs_2 >> [tlgrm_allSuccess, tlgrm_oneFailed])
